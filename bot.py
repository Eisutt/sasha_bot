from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters
from telegramcalendar import create_calendar, process_calendar_selection
import datetime

user_data = {}

# –°—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üì§ –†–∞—Å—Ö–æ–¥", callback_data='expense')],
        [InlineKeyboardButton("üì• –ü—Ä–∏—Ö–æ–¥", callback_data='income')],
    ]
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=InlineKeyboardMarkup(keyboard))

# –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∫–Ω–æ–ø–æ–∫
async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    data = query.data

    if data in ['expense', 'income']:
        user_data[user_id] = {'type': '—Ä–∞—Å—Ö–æ–¥' if data == 'expense' else '–ø—Ä–∏—Ö–æ–¥'}
        calendar, step = create_calendar()
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=calendar)

    elif data.startswith("CALENDAR"):
        selected, date = process_calendar_selection(update, context)
        if selected:
            user_data[user_id]['date'] = date.strftime("%Y-%m-%d")

            # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —é—Ä–ª–∏—Ü–∞–º
            keyboard = [
                [InlineKeyboardButton("–ò–ü –í–æ–ª—ã–Ω–∏–Ω", callback_data='org_–≤–æ–ª—ã–Ω–∏–Ω')],
                [InlineKeyboardButton("–ò–ü –ú–æ—Ä–æ–∑–æ–≤–∞", callback_data='org_–º–æ—Ä–æ–∑–æ–≤–∞')],
            ]
            text = "–ù–∞ –∫–∞–∫–æ–µ –ò–ü –ø—Ä–∏—à–ª–∏ –¥–µ–Ω—å–≥–∏?" if user_data[user_id]['type'] == '–ø—Ä–∏—Ö–æ–¥' else "–í—ã–±–µ—Ä–∏—Ç–µ —é—Ä–ª–∏—Ü–æ:"
            await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
        else:
            # –ö–∞–ª–µ–Ω–¥–∞—Ä—å –µ—â–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ ‚Äî –Ω–µ –º–µ–Ω—è–µ–º
            pass

    elif data.startswith('org_'):
        org = data.split('_')[1]
        user_data[user_id]['org'] = org

        if user_data[user_id]['type'] == '—Ä–∞—Å—Ö–æ–¥':
            keyboard = [
                [InlineKeyboardButton("–õ–æ–≥–∏—Å—Ç–∏–∫–∞", callback_data='cat_–ª–æ–≥–∏—Å—Ç–∏–∫–∞')],
                [InlineKeyboardButton("–ó–ü", callback_data='cat_–∑–ø')],
                [InlineKeyboardButton("–£–ø–∞–∫–æ–≤–∫–∞", callback_data='cat_—É–ø–∞–∫–æ–≤–∫–∞')],
            ]
            await query.edit_message_text("–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ä–∞—Å—Ö–æ–¥–∞:", reply_markup=InlineKeyboardMarkup(keyboard))
        else:
            await query.edit_message_text("–û—Ç –∫–æ–≥–æ –ø—Ä–∏—à–ª–∏ –¥–µ–Ω—å–≥–∏?")
            context.user_data['awaiting_from'] = True

    elif data.startswith('cat_'):
        cat = data.split('_')[1]
        user_data[user_id]['category'] = cat
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–∞:")
        context.user_data['awaiting_sum'] = True

    elif data == 'confirm':
        summary = user_data.get(user_id, {})
        message = f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ:\n–¢–∏–ø: {summary.get('type')}\n–î–∞—Ç–∞: {summary.get('date')}\n–Æ—Ä–ª–∏—Ü–æ: {summary.get('org')}\n"

        if summary['type'] == '—Ä–∞—Å—Ö–æ–¥':
            message += f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {summary.get('category')}\n"
        if summary.get('from'):
            message += f"–û—Ç –∫–æ–≥–æ: {summary.get('from')}\n"

        message += f"–°—É–º–º–∞: {summary.get('sum')} ‚ÇΩ"
        await query.edit_message_text(message)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤ (–æ—Ç –∫–æ–≥–æ –∏ —Å—É–º–º–∞)
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    text = update.message.text

    if context.user_data.get('awaiting_from'):
        user_data[user_id]['from'] = text
        context.user_data['awaiting_from'] = False
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø—Ä–∏—Ö–æ–¥–∞:")
        context.user_data['awaiting_sum'] = True
        return

    if context.user_data.get('awaiting_sum'):
        user_data[user_id]['sum'] = text
        context.user_data['awaiting_sum'] = False

        summary = user_data[user_id]
        msg = f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ:\n–¢–∏–ø: {summary['type']}\n–î–∞—Ç–∞: {summary['date']}\n–Æ—Ä–ª–∏—Ü–æ: {summary['org']}\n"

        if summary['type'] == '—Ä–∞—Å—Ö–æ–¥':
            msg += f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {summary['category']}\n"
        if summary.get('from'):
            msg += f"–û—Ç –∫–æ–≥–æ: {summary.get('from')}\n"

        msg += f"–°—É–º–º–∞: {summary['sum']} ‚ÇΩ"

        keyboard = [[InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data='confirm')]]
        await update.message.reply_text(msg, reply_markup=InlineKeyboardMarkup(keyboard))

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
app = ApplicationBuilder().token("7425395840:AAFp9rUpWu-EQqLi-vryGH7y5cjLbvTmb4E").build()
app.add_handler(CommandHandler("start", start))
app.add_handler(CallbackQueryHandler(handle_callback))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))

app.run_polling()